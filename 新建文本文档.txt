NTSTATUS __stdcall DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)
{
  NTSTATUS result; // eax
  int SymbolicLink; // edi

  DriverObject->DriverUnload = (PDRIVER_UNLOAD)sub_140002414;
  RtlInitUnicodeString(&DeviceName, L"\\Device\\GlobalVistaVentures");
  RtlInitUnicodeString(&SymbolicLinkName, L"\\DosDevices\\GlobalVistaVentures");
  result = IoCreateDevice(DriverObject, 0, &DeviceName, 0x22u, 0x100u, 0, &DeviceObject);
  if ( result >= 0 )
  {
    SymbolicLink = IoCreateSymbolicLink(&SymbolicLinkName, &DeviceName);
    if ( SymbolicLink >= 0 )
    {
      DriverObject->MajorFunction[0] = (PDRIVER_DISPATCH)&sub_140002438;
      DriverObject->MajorFunction[2] = (PDRIVER_DISPATCH)&sub_140002438;
      DriverObject->MajorFunction[18] = (PDRIVER_DISPATCH)&sub_140002438;
      DriverObject->MajorFunction[14] = (PDRIVER_DISPATCH)sub_140001CD4;
      DeviceObject->Flags |= 0x10u;
      DeviceObject->Flags &= ~0x80u;
      return 0;
    }
    else
    {
      _mm_lfence();
      IoDeleteDevice(DeviceObject);
      return SymbolicLink;
    }
  }
  else
  {
    _mm_lfence();
  }
  return result;
}
__int64 __fastcall sub_140001040(__int64 a1, unsigned int a2, __int64 a3, _BYTE *a4)
{
  int v4; // r11d
  __int64 v5; // rax
  unsigned __int64 v6; // r10
  __int64 v7; // rax
  _BYTE *v8; // rdx

  v4 = 0;
  v5 = -1i64;
  do
    ++v5;
  while ( a4[v5] );
  v6 = a2 - v5;
  if ( a2 == v5 )
    return 0i64;
  v7 = 0i64;
  while ( 1 )
  {
    v8 = a4;
    if ( !*a4 )
      break;
    while ( v8[a3 - (_QWORD)a4] == *(_BYTE *)(v8 - a4 + v7 + a1) || *v8 == 63 )
    {
      if ( !*++v8 )
        return v7 + a1;
    }
    v7 = ++v4;
    if ( v4 >= v6 )
      return 0i64;
  }
  return v7 + a1;
}
__int64 __fastcall sub_1400010D4(__int64 a1, __int64 a2, _BYTE *a3)
{
  __int64 v3; // r9
  __int64 v4; // r10
  unsigned int v5; // edi
  unsigned int v9; // esi
  __int64 i; // rbx

  v3 = *(int *)(a1 + 60);
  v4 = 0i64;
  v5 = 0;
  v9 = *(unsigned __int16 *)(v3 + a1 + 6);
  for ( i = *(unsigned __int16 *)(v3 + a1 + 20) + v3 + a1 + 24; v5 < v9; i += 40i64 )
  {
    if ( *(_DWORD *)i == 1162297680 || *(_DWORD *)i == 2019914798 && *(_BYTE *)(i + 4) == 116 )
    {
      v4 = sub_140001040(a1 + *(unsigned int *)(i + 12), *(_DWORD *)(i + 8), a2, a3);
      if ( v4 )
        break;
    }
    ++v5;
  }
  return v4;
}
__int64 sub_140001170()
{
  __int64 v0; // rbx
  _QWORD *Pool; // rax
  _QWORD *v2; // rdi
  NTSTATUS SystemInformation; // eax
  int ReturnLength; // [rsp+30h] [rbp+8h] BYREF

  v0 = 0i64;
  ReturnLength = 0;
  if ( ZwQuerySystemInformation(SystemModuleInformation, 0i64, 0, (PULONG)&ReturnLength) != -1073741820 )
    return 0i64;
  Pool = ExAllocatePool(NonPagedPool, (unsigned int)ReturnLength);
  v2 = Pool;
  if ( !Pool )
    return 0i64;
  SystemInformation = ZwQuerySystemInformation(SystemModuleInformation, Pool, ReturnLength, 0i64);
  _mm_lfence();
  if ( SystemInformation >= 0 )
  {
    if ( *(_DWORD *)v2 )
    {
      _mm_lfence();
      v0 = v2[3];
    }
  }
  ExFreePoolWithTag(v2, 0);
  return v0;
}
__int64 **__fastcall sub_1400011F4(__int64 a1, const UNICODE_STRING *a2)
{
  int v2; // ebx
  char *v4; // r8
  char v5; // cl
  char v6; // al
  __int64 v7; // rsi
  char *v8; // r8
  char v9; // cl
  char v10; // al
  __int64 v11; // rsi
  char *v12; // r8
  char v13; // cl
  char v14; // al
  __int64 **v15; // rsi
  char *v16; // r8
  char v17; // cl
  char v18; // al
  __int64 **i; // rdi
  char *v20; // r8
  char v21; // cl
  char v22; // al
  char Format[32]; // [rsp+20h] [rbp-20h] BYREF

  v2 = 0;
  if ( !a1 )
  {
    v4 = Format;
    qmemcpy(Format, "pTM]QW[`10,' 54h!+%(!+aZQ", 25);
    do
    {
      v5 = 58 * (v2 / 0x3Au);
      v6 = v2++;
      *v4++ ^= v6 - v5 + 57;
    }
    while ( v2 < 25 );
LABEL_16:
    DbgPrintEx(0, 0, Format);
    return 0i64;
  }
  v7 = *(_QWORD *)(qword_1400060B0 + a1);
  if ( !v7 )
  {
    *(_DWORD *)&Format[16] = unk_1400052D0;
    *(_OWORD *)Format = xmmword_1400052C0;
    v8 = Format;
    do
    {
      v9 = 58 * (v2 / 0x3Au);
      v10 = v2++;
      *v8++ ^= v10 - v9 + 57;
    }
    while ( v2 < 20 );
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v7 + 24);
  if ( !v11 )
  {
    v12 = Format;
    Format[24] = 81;
    *(_OWORD *)Format = xmmword_1400052D8;
    *(_QWORD *)&Format[16] = 0x5A613C290075670Bi64;
    do
    {
      v13 = 58 * (v2 / 0x3Au);
      v14 = v2++;
      *v12++ ^= v14 - v13 + 57;
    }
    while ( v2 < 25 );
    goto LABEL_16;
  }
  v15 = (__int64 **)(v11 + 16);
  if ( !v15 )
  {
    *(_DWORD *)&Format[16] = 1644627484;
    *(_OWORD *)Format = xmmword_1400052F8;
    *(_WORD *)&Format[20] = unk_14000530C;
    v16 = Format;
    do
    {
      v17 = 58 * (v2 / 0x3Au);
      v18 = v2++;
      *v16++ ^= v18 - v17 + 57;
    }
    while ( v2 < 22 );
    goto LABEL_16;
  }
  for ( i = (__int64 **)*v15; i != v15 && i; i = (__int64 **)*i )
  {
    if ( !RtlCompareUnicodeString((PCUNICODE_STRING)(i + 11), a2, 1u) )
      return i;
  }
  v20 = Format;
  qmemcpy(&Format[16], "g@K", 3);
  *(_OWORD *)Format = xmmword_140005310;
  do
  {
    v21 = 58 * (v2 / 0x3Au);
    v22 = v2++;
    *v20++ ^= v22 - v21 + 57;
  }
  while ( v2 < 19 );
  DbgPrintEx(0x65u, 1u, Format);
  return 0i64;
}
__int64 __fastcall sub_140001420(PIRP Irp)
{
  struct _IRP *MasterIrp; // rdi
  int v3; // esi
  __int64 v4; // rcx
  struct _KPROCESS *Process; // [rsp+50h] [rbp+8h] BYREF
  __int64 BaseAddress; // [rsp+58h] [rbp+10h] BYREF
  __int64 RegionSize; // [rsp+60h] [rbp+18h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  if ( *(_QWORD *)&MasterIrp->Type && LODWORD(MasterIrp->MdlAddress) && HIDWORD(MasterIrp->MdlAddress) )
  {
    Process = 0i64;
    v3 = PsLookupProcessByProcessId((HANDLE)HIDWORD(MasterIrp->MdlAddress), &Process);
    if ( v3 >= 0 )
    {
      v4 = *(_QWORD *)&MasterIrp->Type;
      BaseAddress = 0i64;
      RegionSize = v4;
      KeAttachProcess(Process);
      ZwAllocateVirtualMemory(
        (HANDLE)0xFFFFFFFFFFFFFFFFi64,
        (PVOID *)&BaseAddress,
        0i64,
        (PSIZE_T)&RegionSize,
        0x3000u,
        (ULONG)MasterIrp->MdlAddress);
      KeDetachProcess();
      ObfDereferenceObject(Process);
      *(_QWORD *)Irp->AssociatedIrp.MasterIrp = BaseAddress;
      Irp->IoStatus.Information = 8i64;
    }
    Irp->IoStatus.Status = v3;
    IofCompleteRequest(Irp, 0);
    return (unsigned int)v3;
  }
  else
  {
    DbgPrintEx(0, 0, "One or more arguments are invalid.\n");
    Irp->IoStatus.Status = -1073741811;
    IofCompleteRequest(Irp, 0);
    return 3221225485i64;
  }
}
__int64 __fastcall sub_14000150C(PIRP Irp)
{
  struct _IRP *MasterIrp; // rsi
  NTSTATUS v2; // edi
  int v4; // esi
  ULONG_PTR v5; // rax

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = 0;
  if ( MasterIrp )
  {
    DbgPrintEx(0, 0, "Dll size received: %d\n", *(_QWORD *)&MasterIrp->Flags);
    v4 = sub_1400025C4((HANDLE)*(unsigned int *)(&MasterIrp->Size + 1), (HANDLE)*(unsigned int *)&MasterIrp->Type);
    if ( v4 < 0 )
    {
      DbgPrintEx(0, 0, "Failed to allocate memory\n");
      v5 = 0i64;
      v2 = v4;
    }
    else
    {
      v5 = 8i64;
      *(_QWORD *)Irp->AssociatedIrp.MasterIrp = 0i64;
    }
    Irp->IoStatus.Status = v2;
    Irp->IoStatus.Information = v5;
  }
  else
  {
    v4 = -1073741811;
    Irp->IoStatus.Status = -1073741811;
  }
  IofCompleteRequest(Irp, 0);
  return (unsigned int)v4;
}
__int64 __fastcall sub_1400015B4(PIRP Irp)
{
  struct _IRP *MasterIrp; // rbx
  PIRP v2; // rdi
  unsigned int v3; // eax
  __int64 **v4; // r14
  struct _IO_STATUS_BLOCK *v5; // r15
  ULONG_PTR Information; // rsi
  __int64 v7; // rax
  void *v8; // rsi
  PRKPROCESS v9; // rdx
  int v10; // eax
  struct _UNICODE_STRING UnicodeString; // [rsp+38h] [rbp-49h] BYREF
  __int128 DestinationString; // [rsp+48h] [rbp-39h] BYREF
  UNICODE_STRING v14; // [rsp+58h] [rbp-29h] BYREF
  __int128 MemoryInformation[3]; // [rsp+68h] [rbp-19h] BYREF
  struct _KAPC_STATE ApcState; // [rsp+98h] [rbp+17h] BYREF
  PRKPROCESS v17; // [rsp+E8h] [rbp+67h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = Irp;
  v3 = *(_DWORD *)&MasterIrp->Type;
  if ( !*(_DWORD *)&MasterIrp->Type || MasterIrp == (struct _IRP *)-4i64 )
  {
    MasterIrp[1].RequestorMode = 0;
    Irp->IoStatus.Status = -1073741811;
  }
  else
  {
    v17 = 0i64;
    if ( (int)sub_140001000(v3, &v17) >= 0 )
    {
      if ( *((_BYTE *)&MasterIrp->Size + 2) )
      {
        RtlInitAnsiString((PANSI_STRING)&DestinationString, (PCSZ)&MasterIrp->Size + 2);
        if ( RtlAnsiStringToUnicodeString(&UnicodeString, (PCANSI_STRING)&DestinationString, 1u) >= 0 )
        {
          KeStackAttachProcess(v17, &ApcState);
          v14 = UnicodeString;
          v4 = sub_1400011F4((__int64)v17, &v14);
          RtlFreeUnicodeString(&UnicodeString);
          if ( v4 )
          {
            v5 = (struct _IO_STATUS_BLOCK *)((char *)v4[6] + *((unsigned int *)v4 + 16));
            Information = MasterIrp[1].IoStatus.Information;
            memset(MemoryInformation, 0, sizeof(MemoryInformation));
            if ( ZwQueryVirtualMemory(
                   (HANDLE)0xFFFFFFFFFFFFFFFFi64,
                   v5,
                   MemoryBasicInformation,
                   MemoryInformation,
                   0x30ui64,
                   0i64) >= 0 )
            {
              _mm_lfence();
              v7 = qword_140006058(v5, (char *)v5 + Information - 1, 1i64);
              v8 = (void *)v7;
              if ( v7 )
              {
                _mm_lfence();
                v9 = v17;
                *(_DWORD *)(v7 + 48) = *(_DWORD *)(v7 + 48) & 0xFFFFF07F | 0x300;
                v10 = qword_140006060(v7, v9);
                _mm_lfence();
                if ( v10 >= 0 )
                {
                  qword_140006068(v8, v17);
                  *((_DWORD *)v4 + 16) += LODWORD(MasterIrp[1].IoStatus.Information);
                  MasterIrp[1].RequestorMode = 1;
                  MasterIrp[1].UserIosb = v5;
                  KeUnstackDetachProcess(&ApcState);
                  v2->IoStatus.Status = 0;
                  v2->IoStatus.Information = 288i64;
                  IofCompleteRequest(v2, 0);
                  return 0i64;
                }
                ExFreePoolWithTag(v8, 0);
              }
            }
          }
          KeUnstackDetachProcess(&ApcState);
        }
      }
    }
    MasterIrp[1].RequestorMode = 0;
    Irp = v2;
    v2->IoStatus.Status = -1073741811;
  }
  IofCompleteRequest(Irp, 0);
  return 3221225485i64;
}
__int64 __fastcall sub_1400017B0(PIRP Irp)
{
  struct _IRP *MasterIrp; // rax
  unsigned int v2; // edi

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = 0;
  if ( MasterIrp
    && (int)sub_140002A04(*(unsigned int *)&MasterIrp->Type, &MasterIrp->MdlAddress, &MasterIrp->Overlay) >= 0 )
  {
    Irp->IoStatus.Information = 168i64;
  }
  else
  {
    v2 = -1073741811;
  }
  Irp->IoStatus.Status = v2;
  IofCompleteRequest(Irp, 0);
  return v2;
}
__int64 __fastcall sub_140001808(PIRP Irp)
{
  struct _IRP *MasterIrp; // rdi
  int v3; // esi
  PRKPROCESS Process; // [rsp+30h] [rbp+8h] BYREF
  ULONG_PTR RegionSize; // [rsp+38h] [rbp+10h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  if ( *(_QWORD *)&MasterIrp->Type && LODWORD(MasterIrp->MdlAddress) )
  {
    Process = 0i64;
    v3 = PsLookupProcessByProcessId((HANDLE)LODWORD(MasterIrp->MdlAddress), &Process);
    if ( v3 >= 0 )
    {
      RegionSize = 0i64;
      KeAttachProcess(Process);
      ZwFreeVirtualMemory((HANDLE)0xFFFFFFFFFFFFFFFFi64, (PVOID *)MasterIrp, &RegionSize, 0x8000u);
      KeDetachProcess();
      ObfDereferenceObject(Process);
    }
    Irp->IoStatus.Information = 0i64;
    Irp->IoStatus.Status = v3;
    IofCompleteRequest(Irp, 0);
    return (unsigned int)v3;
  }
  else
  {
    Irp->IoStatus.Status = -1073741811;
    IofCompleteRequest(Irp, 0);
    return 3221225485i64;
  }
}
__int64 __fastcall sub_1400018B8(PIRP Irp)
{
  struct _IRP *MasterIrp; // rdi
  PIRP v2; // rbx
  NTSTATUS v3; // esi
  __int64 **v4; // r14
  struct _UNICODE_STRING UnicodeString; // [rsp+20h] [rbp-60h] BYREF
  struct _STRING DestinationString; // [rsp+30h] [rbp-50h] BYREF
  UNICODE_STRING v8; // [rsp+40h] [rbp-40h] BYREF
  struct _KAPC_STATE ApcState; // [rsp+50h] [rbp-30h] BYREF
  PRKPROCESS PROCESS; // [rsp+A0h] [rbp+20h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = Irp;
  if ( !*(_DWORD *)&MasterIrp->Type || MasterIrp == (struct _IRP *)-4i64 )
  {
    Irp->IoStatus.Status = -1073741811;
  }
  else
  {
    if ( (int)sub_140001000(*(unsigned int *)&MasterIrp->Type, &PROCESS) >= 0 )
    {
      if ( *((_BYTE *)&MasterIrp->Size + 2) )
      {
        RtlInitAnsiString(&DestinationString, (PCSZ)&MasterIrp->Size + 2);
        v3 = RtlAnsiStringToUnicodeString(&UnicodeString, &DestinationString, 1u);
        if ( v3 >= 0 )
        {
          KeStackAttachProcess(PROCESS, &ApcState);
          v8 = UnicodeString;
          v4 = sub_1400011F4((__int64)PROCESS, &v8);
          RtlFreeUnicodeString(&UnicodeString);
          if ( v4 )
          {
            _mm_lfence();
            MasterIrp[1].IoStatus.Information = (ULONG_PTR)v4[6];
            *(_DWORD *)&MasterIrp[1].RequestorMode = *((_DWORD *)v4 + 16);
            KeUnstackDetachProcess(&ApcState);
            BYTE4(MasterIrp[1].IoStatus.Pointer) = 1;
            v2->IoStatus.Information = 280i64;
            v2->IoStatus.Status = v3;
            IofCompleteRequest(v2, 0);
            return (unsigned int)v3;
          }
          KeUnstackDetachProcess(&ApcState);
        }
      }
    }
    BYTE4(MasterIrp[1].IoStatus.Pointer) = 0;
    Irp = v2;
    v2->IoStatus.Status = -1073741811;
  }
  IofCompleteRequest(Irp, 0);
  return 3221225485i64;
}
__int64 __fastcall sub_1400019E4(PIRP Irp)
{
  struct _IRP *MasterIrp; // rsi
  unsigned int v2; // ebx
  __int64 ProcessPeb; // rax
  PEPROCESS v6; // [rsp+30h] [rbp+8h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = 0;
  if ( MasterIrp && (v6 = 0i64, PsLookupProcessByProcessId((HANDLE)*(unsigned int *)&MasterIrp->Type, &v6), v6) )
  {
    ProcessPeb = PsGetProcessPeb();
    if ( !ProcessPeb )
      return 3221225473i64;
    MasterIrp->MdlAddress = (PMDL)ProcessPeb;
    Irp->IoStatus.Information = 16i64;
  }
  else
  {
    v2 = -1073741811;
  }
  Irp->IoStatus.Status = v2;
  IofCompleteRequest(Irp, 0);
  return v2;
}
__int64 __fastcall sub_140001A64(PIRP Irp)
{
  struct _IRP *MasterIrp; // rbx

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  MasterIrp[2].CancelRoutine = (PDRIVER_CANCEL)sub_140002EA0((PCWSTR)MasterIrp);
  Irp->IoStatus.Status = 0;
  Irp->IoStatus.Information = 528i64;
  IofCompleteRequest(Irp, 0);
  return 0i64;
}
__int64 __fastcall sub_140001AA8(PIRP Irp)
{
  unsigned int v2; // ebx
  struct _IRP *MasterIrp; // rcx
  int v4; // eax

  v2 = 0;
  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  if ( MasterIrp )
  {
    qword_140006098 = (__int64)MasterIrp->IoStatus.Pointer;
    qword_1400060A0 = (__int64)MasterIrp->ThreadListEntry.Blink;
    qword_1400060A8 = MasterIrp->IoStatus.Information;
    qword_1400060B0 = (__int64)MasterIrp->AssociatedIrp.MasterIrp;
    qword_1400060B8 = (__int64)MasterIrp->ThreadListEntry.Flink;
    qword_1400060C0 = *(_QWORD *)&MasterIrp->Type;
    qword_1400060C8 = (__int64)MasterIrp->MdlAddress;
    qword_1400060D0 = *(_QWORD *)&MasterIrp->Flags;
    if ( MasterIrp->RequestorMode )
      v4 = sub_140001D84();
    else
      v4 = sub_140001DDC();
    if ( v4 < 0 )
      v2 = -1073741823;
    else
      Irp->IoStatus.Information = 72i64;
  }
  else
  {
    v2 = -1073741811;
  }
  Irp->IoStatus.Status = v2;
  IofCompleteRequest(Irp, 0);
  return v2;
}

__int64 __fastcall sub_140001B60(PIRP Irp)
{
  struct _IRP *MasterIrp; // r14
  unsigned int v2; // esi
  __int64 v4; // rcx
  __int64 v5; // rbx
  struct _IRP *v6; // rdi
  PEPROCESS CurrentProcess; // rax
  int v8; // eax
  NTSTATUS v9; // edx
  __int64 v11; // [rsp+70h] [rbp+8h] BYREF
  __int64 v12; // [rsp+78h] [rbp+10h] BYREF
  __int64 v13; // [rsp+80h] [rbp+18h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v2 = 0;
  if ( MasterIrp )
  {
    if ( LOBYTE(MasterIrp->ThreadListEntry.Flink) == 1 )
    {
      v4 = *(unsigned int *)&MasterIrp->Type;
      v11 = 0i64;
      sub_140001000(v4, &v11);
      if ( v11 )
      {
        v5 = *(_QWORD *)&MasterIrp->Flags;
        v6 = MasterIrp->AssociatedIrp.MasterIrp;
        v12 = 0i64;
        CurrentProcess = IoGetCurrentProcess();
        if ( (int)MmCopyVirtualMemory(v11, MasterIrp->MdlAddress, CurrentProcess, v6, v5, 0, &v12) >= 0 )
        {
          Irp->IoStatus.Status = 0;
          Irp->IoStatus.Information = 8i64;
          goto LABEL_12;
        }
      }
      v8 = -1073741823;
      Irp->IoStatus.Information = 0i64;
      Irp->IoStatus.Status = -1073741823;
    }
    else
    {
      v13 = 0i64;
      v8 = sub_140002F94(
             *(unsigned int *)&MasterIrp->Type,
             MasterIrp->MdlAddress,
             MasterIrp->AssociatedIrp.MasterIrp,
             *(_QWORD *)&MasterIrp->Flags,
             &v13);
      v9 = v8;
      if ( v8 >= 0 )
        v9 = 0;
      Irp->IoStatus.Information = (((__int64)v8 >> 63) & 0xFFFFFFFFFFFFFFF8ui64) + 8;
      Irp->IoStatus.Status = v9;
    }
    v2 = v8;
    goto LABEL_12;
  }
  v2 = -1073741811;
  Irp->IoStatus.Status = -1073741811;
LABEL_12:
  IofCompleteRequest(Irp, 0);
  return v2;
}
__int64 __fastcall sub_140001C64(PIRP Irp)
{
  struct _IRP *MasterIrp; // rdx
  int v3; // ebx
  __int64 v5; // [rsp+40h] [rbp+8h] BYREF

  MasterIrp = Irp->AssociatedIrp.MasterIrp;
  v5 = 0i64;
  v3 = sub_1400032C4(
         *(unsigned int *)&MasterIrp->Type,
         MasterIrp->MdlAddress,
         *(_QWORD *)&MasterIrp->Flags,
         MasterIrp->AssociatedIrp.MasterIrp,
         &v5);
  Irp->IoStatus.Status = (v3 >> 31) & 0xC0000001;
  Irp->IoStatus.Information = (((__int64)v3 >> 63) & 0xFFFFFFFFFFFFFFE0ui64) + 32;
  IofCompleteRequest(Irp, 0);
  return (unsigned int)v3;
}

__int64 __fastcall sub_140001CD4(__int64 a1, IRP *a2)
{
  unsigned int LowPart; // ecx
  unsigned int v3; // ecx
  unsigned int v4; // ecx
  unsigned int v5; // ecx
  unsigned int v6; // ecx
  unsigned int v8; // ecx
  unsigned int v9; // ecx
  unsigned int v10; // ecx
  unsigned int v11; // ecx

  LowPart = a2->Tail.Overlay.CurrentStackLocation->Parameters.Read.ByteOffset.LowPart;
  if ( LowPart <= 0x221A60 )
  {
    if ( LowPart == 2234976 )
      return sub_140001808(a2);
    v3 = LowPart - 2234956;
    if ( !v3 )
      return sub_14000150C(a2);
    v4 = v3 - 4;
    if ( !v4 )
      return sub_140001A64(a2);
    v5 = v4 - 4;
    if ( !v5 )
      return sub_140001420(a2);
    v6 = v5 - 4;
    if ( !v6 )
      return sub_140001B60(a2);
    if ( v6 == 4 )
      return sub_140001C64(a2);
    return 128i64;
  }
  v8 = LowPart - 2234980;
  if ( !v8 )
    return sub_1400018B8(a2);
  v9 = v8 - 412;
  if ( !v9 )
    return sub_1400015B4(a2);
  v10 = v9 - 8;
  if ( !v10 )
    return sub_1400019E4(a2);
  v11 = v10 - 4;
  if ( !v11 )
    return sub_140001AA8(a2);
  if ( v11 != 4 )
    return 128i64;
  return sub_1400017B0(a2);
}

__int64 sub_140001D84()
{
  __int64 v0; // rax

  v0 = sub_140001170();
  if ( !v0 )
    return 3221225473i64;
  qword_140006058 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD))(v0 + qword_1400060C0);
  if ( !(v0 + qword_1400060C0) )
    return 3221225473i64;
  qword_140006060 = (__int64 (__fastcall *)(_QWORD, _QWORD))(qword_1400060D0 + v0);
  qword_140006068 = (__int64 (__fastcall *)(_QWORD, _QWORD))(v0 + qword_1400060C8);
  return qword_1400060D0 + v0 == 0 ? 0xC0000001 : 0;
}
__int64 sub_140001DDC()
{
  __int64 v0; // rsi
  const CHAR *v1; // r8
  char v3; // bl
  int v4; // r8d
  _BYTE *v5; // r9
  char v6; // cl
  char v7; // al
  int v8; // r8d
  _BYTE *v9; // r9
  char v10; // cl
  char v11; // al
  __int64 (__fastcall *v12)(_QWORD, _QWORD, _QWORD); // rax
  int v13; // r8d
  _BYTE *v14; // r9
  char v15; // cl
  char v16; // al
  _BYTE *v17; // r10
  int v18; // r8d
  _BYTE *v19; // r9
  char v20; // cl
  char v21; // al
  _BYTE *v22; // r8
  __int64 v23; // rdi
  __int64 (__fastcall *v24)(_QWORD, _QWORD); // rax
  _BYTE *v25; // r9
  char v26; // cl
  char v27; // al
  int v28; // r8d
  _BYTE *v29; // r9
  char v30; // cl
  char v31; // al
  int v32; // r8d
  _BYTE *v33; // r9
  char v34; // cl
  char v35; // al
  _BYTE *v36; // r10
  int v37; // r8d
  _BYTE *v38; // r9
  char v39; // cl
  char v40; // al
  _BYTE *v41; // r8
  __int64 v42; // rdi
  __int64 v43; // rax
  int v44; // r8d
  _BYTE *v45; // r9
  char v46; // cl
  char v47; // al
  int v48; // r8d
  _BYTE *v49; // r9
  char v50; // cl
  char v51; // al
  __int64 (__fastcall *v52)(_QWORD, _QWORD); // rax
  _QWORD v53[3]; // [rsp+40h] [rbp-C8h] BYREF
  _QWORD v54[2]; // [rsp+58h] [rbp-B0h] BYREF
  _OWORD v55[2]; // [rsp+68h] [rbp-A0h] BYREF
  _BYTE v56[34]; // [rsp+88h] [rbp-80h] BYREF
  _BYTE v57[34]; // [rsp+B0h] [rbp-58h] BYREF
  struct _OSVERSIONINFOW VersionInformation; // [rsp+D8h] [rbp-30h] BYREF

  v0 = sub_140001170();
  DbgPrintEx(0, 0, "[DEBUG] KernelBase : %llx\n", v0);
  if ( !v0 )
  {
    v1 = "[ERROR] Failed to retrieve Kernel Base.\n";
LABEL_3:
    DbgPrintEx(0, 0, v1);
    return 3221225473i64;
  }
  VersionInformation.dwOSVersionInfoSize = 276;
  sub_1400034C0(&VersionInformation.dwMajorVersion, 0i64, 272i64);
  if ( RtlGetVersion(&VersionInformation) < 0 || (int)VersionInformation.dwBuildNumber < 22000 )
    v3 = 0;
  else
    v3 = ((signed int)VersionInformation.dwBuildNumber >= 26100) + 1;
  LODWORD(v54[1]) = 1424665306;
  *(_OWORD *)&v53[1] = xmmword_140005150;
  v54[0] = 0x11A6C5057CA7C901i64;
  qmemcpy(v55, "ABCDEFG89:;<=>?01234567()*+T", 28);
  DbgPrintEx(0, 0, "[DEBUG] Searching for MiAllocateVad...\n");
  if ( BYTE11(v55[1]) )
  {
    v4 = 0;
    v5 = v55;
    do
    {
      v6 = 58 * (v4 / 0x3Au);
      v7 = v4++;
      *v5++ ^= v7 - v6 + 57;
    }
    while ( v4 < 28 );
  }
  if ( BYTE3(v54[1]) )
  {
    v8 = 0;
    v9 = &v53[1];
    do
    {
      v10 = 58 * (v8 / 0x3Au);
      v11 = v8++;
      *v9++ ^= v11 - v10 + 57;
    }
    while ( v8 < 28 );
  }
  v12 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD))sub_1400010D4(v0, (__int64)&v53[1], v55);
  qword_140006058 = v12;
  if ( !v12 )
  {
    DbgPrintEx(0, 0, "[ERROR] Failed to find MiAllocateVad.\n");
    return 3221225473i64;
  }
  DbgPrintEx(0, 0, "[DEBUG] MiAllocateVad found at: %llx\n", v12);
  v13 = 0;
  LOBYTE(v54[0]) = 73;
  *(_WORD *)&v57[32] = 23198;
  qmemcpy(v55, "ABCDEFG89:;<=>?0I", 17);
  *(_OWORD *)&v53[1] = xmmword_1400051A8;
  *(_OWORD *)&v57[16] = xmmword_1400051F8;
  qmemcpy(v56, "ABCDEFG89:;<=>?01234567()*+,-./ !Z", sizeof(v56));
  *(_OWORD *)v57 = xmmword_1400051E8;
  if ( v3 == 2 )
  {
    v14 = v57;
    do
    {
      v15 = 58 * (v13 / 0x3Au);
      v16 = v13++;
      *v14++ ^= v16 - v15 + 57;
    }
    while ( v13 < 34 );
    v17 = v57;
    v18 = 0;
    v19 = v56;
    do
    {
      v20 = 58 * (v18 / 0x3Au);
      v21 = v18++;
      *v19++ ^= v21 - v20 + 57;
    }
    while ( v18 < 34 );
    v22 = v56;
    goto LABEL_23;
  }
  v25 = &v53[1];
  do
  {
    v26 = 58 * (v13 / 0x3Au);
    v27 = v13++;
    *v25++ ^= v27 - v26 + 57;
  }
  while ( v13 < 17 );
  v17 = &v53[1];
  v28 = 0;
  v29 = v55;
  do
  {
    v30 = 58 * (v28 / 0x3Au);
    v31 = v28++;
    *v29++ ^= v31 - v30 + 57;
  }
  while ( v28 < 17 );
  v22 = v55;
  if ( v3 )
  {
    if ( v3 != 1 )
    {
LABEL_23:
      v23 = 0i64;
      goto LABEL_24;
    }
    v23 = 290i64;
  }
  else
  {
    v23 = 289i64;
  }
LABEL_24:
  v24 = (__int64 (__fastcall *)(_QWORD, _QWORD))(sub_1400010D4(v0, (__int64)v17, v22) - v23);
  qword_140006068 = v24;
  if ( !v24 )
  {
    v1 = "[ERROR] Failed to find MiInsertVad.\n";
    goto LABEL_3;
  }
  DbgPrintEx(0, 0, "[DEBUG] MiInsertVad resolved @ %p (after -0x%IX)\n", v24, v23);
  v55[0] = xmmword_140005210;
  DWORD2(v55[1]) = 1414746705;
  *(_QWORD *)&v55[1] = 0x50A64E4D4C4BCF46i64;
  *(_OWORD *)&v56[16] = xmmword_140005260;
  v56[32] = 89;
  *(_OWORD *)&v53[1] = xmmword_140005230;
  qmemcpy(v54, "12tsrq7onmlT", 12);
  *(_OWORD *)v56 = xmmword_140005250;
  qmemcpy(v57, "ABCDEFG89:;<=>?01234567()*+,-./ Y", 33);
  DbgPrintEx(0, 0, "[DEBUG] Searching for MiInsertVadCharges...\n");
  if ( v3 == 2 )
  {
    v32 = 0;
    v33 = v56;
    do
    {
      v34 = 58 * (v32 / 0x3Au);
      v35 = v32++;
      *v33++ ^= v35 - v34 + 57;
    }
    while ( v32 < 33 );
    v36 = v56;
    v37 = 0;
    v38 = v57;
    do
    {
      v39 = 58 * (v37 / 0x3Au);
      v40 = v37++;
      *v38++ ^= v40 - v39 + 57;
    }
    while ( v37 < 33 );
    v41 = v57;
    goto LABEL_40;
  }
  if ( BYTE11(v55[1]) )
  {
    v44 = 0;
    v45 = v55;
    do
    {
      v46 = 58 * (v44 / 0x3Au);
      v47 = v44++;
      *v45++ ^= v47 - v46 + 57;
    }
    while ( v44 < 28 );
  }
  v36 = v55;
  if ( BYTE3(v54[1]) )
  {
    v48 = 0;
    v49 = &v53[1];
    do
    {
      v50 = 58 * (v48 / 0x3Au);
      v51 = v48++;
      *v49++ ^= v51 - v50 + 57;
    }
    while ( v48 < 28 );
  }
  v41 = &v53[1];
  if ( v3 )
  {
    if ( v3 != 1 )
    {
LABEL_40:
      v42 = 0i64;
      goto LABEL_41;
    }
    v42 = 309i64;
  }
  else
  {
    v42 = 458i64;
  }
LABEL_41:
  v43 = sub_1400010D4(v0, (__int64)v36, v41);
  if ( !v43 )
  {
    v1 = "[ERROR] Failed to find MiInsertVadCharges.\n";
    goto LABEL_3;
  }
  v52 = (__int64 (__fastcall *)(_QWORD, _QWORD))(v43 - v42);
  qword_140006060 = v52;
  if ( !v52 )
  {
    v1 = "[ERROR] MiInsertVadCharges resolution failed.\n";
    goto LABEL_3;
  }
  DbgPrintEx(0, 0, "[DEBUG] MiInsertVadCharges found at: %llx (after -0x%IX)\n", v52, v42);
  if ( !v3 || v3 == 1 )
  {
    qword_1400060B0 = 1360i64;
    qword_1400060A0 = 1096i64;
    qword_140006098 = 1088i64;
    qword_1400060A8 = 1448i64;
    goto LABEL_60;
  }
  if ( v3 == 2 )
  {
    qword_1400060B0 = 736i64;
    qword_1400060A0 = 472i64;
    qword_140006098 = 464i64;
    qword_1400060A8 = 824i64;
LABEL_60:
    qword_1400060B8 = 40i64;
  }
  DbgPrintEx(
    0,
    0,
    "[INFO] Struct Offsets: Peb=0x%X DirTbl=0x%X ActiveLinks=0x%X UniqueId=0x%X ImgName=0x%X\n",
    qword_1400060B0,
    qword_1400060B8,
    qword_1400060A0,
    qword_140006098,
    qword_1400060A8);
  DbgPrintEx(0, 0, "[INFO] All functions initialized successfully.\n");
  return 0i64;
}
NTSTATUS sub_140002414()
{
  IoDeleteDevice(DeviceObject);
  return IoDeleteSymbolicLink(&SymbolicLinkName);
}
__int64 __fastcall sub_140002438(__int64 a1, IRP *a2)
{
  a2->IoStatus.Status = 0;
  a2->IoStatus.Information = 0i64;
  IofCompleteRequest(a2, 0);
  return 0i64;
}
unsigned __int64 __fastcall sub_140002548(__int64 a1, _QWORD *a2)
{
  unsigned __int64 v3; // rbx
  unsigned __int64 result; // rax
  __int64 v5; // rax
  __m128i v6; // xmm0
  __m128i v7; // [rsp+20h] [rbp-28h] BYREF
  char v8[24]; // [rsp+30h] [rbp-18h] BYREF

  v3 = (a1 + 4095) & 0xFFFFFFFFFFFFF000ui64;
  v7 = *(__m128i *)sub_14000296C(&v7, v3);
  result = _mm_srli_si128(v7, 8).m128i_u64[0];
  while ( (result & 0xFFF) != 0 )
  {
    sub_140002B28(&v7);
    v5 = sub_14000296C(v8, v3);
    v6 = *(__m128i *)v5;
    result = *(_QWORD *)(v5 + 8);
    v7 = v6;
  }
  *a2 = v7.m128i_i64[0];
  return result;
}
__int64 __fastcall sub_1400025C4(HANDLE ProcessId, HANDLE a2, __int64 a3, char **a4)
{
  char *v8; // rax
  char *v9; // r14
  const CHAR *v10; // r8
  __int64 v12; // rbx
  __int64 v13; // rdi
  char v14; // si
  char *v15; // r12
  __int128 *v16; // rax
  __int128 v17; // xmm0
  _QWORD *v18; // r15
  __int64 v19; // r9
  _QWORD *v20; // r15
  __int64 v21; // r9
  _QWORD *v22; // r15
  __int64 v23; // r9
  _QWORD *v24; // r15
  __int64 v25; // r9
  __int128 *v26; // rax
  __int128 v27; // xmm0
  _QWORD *v28; // r15
  __int64 v29; // r9
  _QWORD *v30; // r15
  __int64 v31; // r9
  _QWORD *v32; // r15
  __int64 v33; // r9
  _QWORD *v34; // r15
  __int64 v35; // r9
  PEPROCESS v36; // [rsp+38h] [rbp-39h] BYREF
  __int64 v37; // [rsp+40h] [rbp-31h] BYREF
  __int128 v38; // [rsp+48h] [rbp-29h]
  __int128 v39; // [rsp+58h] [rbp-19h]
  __int128 v40; // [rsp+68h] [rbp-9h]
  __int128 v41; // [rsp+78h] [rbp+7h]
  _BYTE _88[72]; // [rsp+88h] [rbp+17h] BYREF
  PEPROCESS v43; // [rsp+F0h] [rbp+7Fh] BYREF

  v8 = (char *)sub_140002548(a3, &v37);
  *a4 = v8;
  v9 = v8;
  if ( !v8 )
  {
    v10 = "[AllocateAndExposeMemory] Failed to allocate kernel memory!\n\n";
    goto LABEL_3;
  }
  DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Successfully allocated kernel memory at 0x%p (size: 0x%llx)\n", v8, a3);
  v43 = 0i64;
  PsLookupProcessByProcessId(a2, &v43);
  if ( !v43 )
  {
    v10 = "[AllocateAndExposeMemory] Failed to find calling process.\n";
    goto LABEL_3;
  }
  v12 = sub_140002E7C();
  DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Current CR3 for ProcessID: 0x%llx\n", v12);
  v36 = 0i64;
  PsLookupProcessByProcessId(ProcessId, &v36);
  if ( !v36 )
  {
    v10 = "[AllocateAndExposeMemory] Failed to find target process.\n";
    goto LABEL_3;
  }
  v13 = sub_140002E7C();
  DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Current CR3 for TargetProcessID: 0x%llx\n", v13);
  v14 = 1;
  DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Looping through pages to set supervisor bit\n");
  v15 = &v9[a3];
  if ( v9 >= &v9[a3] )
    goto LABEL_38;
  do
  {
    DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Processing virtual address: 0x%p\n", v9);
    v16 = (__int128 *)sub_140002BF4(_88, v9, v12);
    v17 = v16[1];
    v38 = *v16;
    v18 = (_QWORD *)v38;
    v39 = v17;
    if ( (*(_QWORD *)v38 & 1) != 0 && (v19 = (*(_QWORD *)v38 >> 12) & 0xFFFFFFFFFi64) != 0 )
    {
      DbgPrintEx(0, 0, "PML4E PFN for ProcessID: 0x%llx\n", v19);
      *v18 |= 4ui64;
      v20 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if ( (**((_QWORD **)&v38 + 1) & 1) != 0 && (v21 = (**((_QWORD **)&v38 + 1) >> 12) & 0xFFFFFFFFFi64) != 0 )
      {
        DbgPrintEx(0, 0, "PDPTE PFN for ProcessID: 0x%llx\n", v21);
        *v20 |= 4ui64;
        v22 = (_QWORD *)v39;
        if ( (*(_QWORD *)v39 & 1) != 0 && (v23 = (*(_QWORD *)v39 >> 12) & 0xFFFFFFFFFi64) != 0 )
        {
          DbgPrintEx(0, 0, "PDE PFN for ProcessID: 0x%llx\n", v23);
          *v22 |= 4ui64;
          v24 = (_QWORD *)*((_QWORD *)&v39 + 1);
          if ( (**((_QWORD **)&v39 + 1) & 1) != 0 && (v25 = (**((_QWORD **)&v39 + 1) >> 12) & 0xFFFFFFFFFi64) != 0 )
          {
            DbgPrintEx(0, 0, "PTE PFN for ProcessID: 0x%llx\n", v25);
            *v24 |= 4ui64;
            v26 = (__int128 *)sub_140002BF4(_88, v9, v13);
            v27 = v26[1];
            v40 = *v26;
            v28 = (_QWORD *)v40;
            v41 = v27;
            if ( (*(_QWORD *)v40 & 1) != 0 && (v29 = (*(_QWORD *)v40 >> 12) & 0xFFFFFFFFFi64) != 0 )
            {
              DbgPrintEx(0, 0, "PML4E PFN for TargetProcessID: 0x%llx\n", v29);
              *v28 |= 4ui64;
              v30 = (_QWORD *)*((_QWORD *)&v40 + 1);
              if ( (**((_QWORD **)&v40 + 1) & 1) != 0 && (v31 = (**((_QWORD **)&v40 + 1) >> 12) & 0xFFFFFFFFFi64) != 0 )
              {
                DbgPrintEx(0, 0, "PDPTE PFN for TargetProcessID: 0x%llx\n", v31);
                *v30 |= 4ui64;
                v32 = (_QWORD *)v41;
                if ( (*(_QWORD *)v41 & 1) != 0 && (v33 = (*(_QWORD *)v41 >> 12) & 0xFFFFFFFFFi64) != 0 )
                {
                  DbgPrintEx(0, 0, "PDE PFN for TargetProcessID: 0x%llx\n", v33);
                  *v32 |= 4ui64;
                  v34 = (_QWORD *)*((_QWORD *)&v41 + 1);
                  if ( (**((_QWORD **)&v41 + 1) & 1) != 0 )
                  {
                    v35 = (**((_QWORD **)&v41 + 1) >> 12) & 0xFFFFFFFFFi64;
                    if ( v35 )
                    {
                      DbgPrintEx(0, 0, "PTE PFN for TargetProcessID: 0x%llx\n", v35);
                      *v34 |= 4ui64;
                      goto LABEL_35;
                    }
                  }
                  DbgPrintEx(0, 0, "PTE for TargetProcessID is invalid\n\n");
                }
                else
                {
                  DbgPrintEx(0, 0, "PDE for TargetProcessID is invalid\n\n");
                }
              }
              else
              {
                DbgPrintEx(0, 0, "PDPTE for TargetProcessID is invalid\n\n");
              }
            }
            else
            {
              DbgPrintEx(0, 0, "PML4E for TargetProcessID is invalid\n\n");
            }
          }
          else
          {
            DbgPrintEx(0, 0, "PTE for ProcessID is invalid\n\n");
          }
        }
        else
        {
          DbgPrintEx(0, 0, "PDE for ProcessID is invalid\n\n");
        }
      }
      else
      {
        DbgPrintEx(0, 0, "PDPTE for ProcessID is invalid\n\n");
      }
    }
    else
    {
      DbgPrintEx(0, 0, "PML4E for ProcessID is invalid\n\n");
    }
    v14 = 0;
LABEL_35:
    v9 += 4096;
  }
  while ( v9 < v15 );
  if ( v14 )
  {
LABEL_38:
    DbgPrintEx(0, 0, "[AllocateAndExposeMemory] Successfully exposed all pages for both processes.\n");
    return 0i64;
  }
  v10 = "[AllocateAndExposeMemory] Failed to expose some pages for either ProcessID or TargetProcessID.\n";
LABEL_3:
  DbgPrintEx(0, 0, v10);
  return 3221225473i64;
}
struct _MDL **__fastcall sub_14000296C(struct _MDL **a1, __int64 a2)
{
  struct _MDL *PagesForMdl; // rax
  struct _MDL *v4; // rsi
  struct _MDL *v5; // rbp

  PagesForMdl = MmAllocatePagesForMdl(0i64, (PHYSICAL_ADDRESS)-1i64, 0i64, (a2 & 0xFFFFFFFFFFFFF000ui64) + 4096);
  v4 = PagesForMdl;
  if ( PagesForMdl
    && (v5 = (struct _MDL *)MmMapLockedPagesSpecifyCache(PagesForMdl, 0, MmCached, 0i64, 0, 0x10u)) != 0i64
    && MmProtectMdlSystemAddress(v4, 0x40u) >= 0 )
  {
    *a1 = v4;
    a1[1] = v5;
  }
  else
  {
    *a1 = 0i64;
    a1[1] = 0i64;
  }
  return a1;
}
__int64 __fastcall sub_140002A04(void *a1, __int64 a2, _QWORD *a3)
{
  __int64 v6; // rdi
  __int64 v7; // rsi
  __int64 v8; // rax
  void *v9; // rdx
  __int64 v10; // rcx
  __int128 v11; // [rsp+38h] [rbp-9h] BYREF
  __int128 v12; // [rsp+48h] [rbp+7h]
  __int128 v13; // [rsp+58h] [rbp+17h]
  struct _KAPC_STATE v14; // [rsp+68h] [rbp+27h] BYREF
  PEPROCESS v15; // [rsp+C0h] [rbp+7Fh] BYREF

  v15 = 0i64;
  PsLookupProcessByProcessId(a1, &v15);
  if ( !v15 )
    return 3221225473i64;
  memset(&v14, 0, sizeof(v14));
  KeStackAttachProcess(v15, &v14);
  v11 = 0i64;
  v12 = 0i64;
  v13 = 0i64;
  if ( ZwQueryVirtualMemory((HANDLE)0xFFFFFFFFFFFFFFFFi64, 0i64, MemoryBasicInformation, &v11, 0x30ui64, 0i64) >= 0 )
  {
    v6 = 0i64;
    v7 = a2 - (_QWORD)a3;
    do
    {
      v8 = v11;
      if ( (_QWORD)v11 )
      {
        v10 = *((_QWORD *)&v12 + 1);
        if ( (BYTE4(v13) & 0x40) != 0 )
        {
          if ( v6 >= 10 )
            break;
          *(_QWORD *)((char *)a3 + v7) = v11;
          ++v6;
          *a3++ = v10;
        }
        v9 = (void *)(v10 + v8);
      }
      else
      {
        v9 = (void *)*((_QWORD *)&v12 + 1);
      }
    }
    while ( ZwQueryVirtualMemory((HANDLE)0xFFFFFFFFFFFFFFFFi64, v9, MemoryBasicInformation, &v11, 0x30ui64, 0i64) >= 0 );
  }
  KeUnstackDetachProcess(&v14);
  ObfDereferenceObject(v15);
  return 0i64;
}
void __fastcall sub_140002B28(PVOID *a1)
{
  PEPROCESS CurrentProcess; // rax
  PVOID v3; // rbx
  PEPROCESS v4; // rdi
  PEPROCESS v5; // rax
  struct _MDL *v6; // rcx
  PVOID MappedSystemVa; // rax
  __int64 v8; // [rsp+50h] [rbp+8h] BYREF
  __int64 v9; // [rsp+58h] [rbp+10h] BYREF

  CurrentProcess = IoGetCurrentProcess();
  v3 = a1[1];
  v4 = CurrentProcess;
  v5 = IoGetCurrentProcess();
  if ( (int)MmCopyVirtualMemory(v5, v3, v4, &v8, 1i64, 0, &v9) >= 0 && v9 == 1 )
  {
    v6 = (struct _MDL *)*a1;
    if ( (*((_BYTE *)*a1 + 10) & 5) != 0 )
      MappedSystemVa = v6->MappedSystemVa;
    else
      MappedSystemVa = MmMapLockedPagesSpecifyCache(v6, 0, MmCached, 0i64, 0, 0x10u);
    if ( MappedSystemVa )
    {
      if ( MmIsAddressValid(MappedSystemVa) )
      {
        MmUnmapLockedPages(a1[1], (PMDL)*a1);
        MmFreePagesFromMdl((PMDL)*a1);
        IoFreeMdl((PMDL)*a1);
      }
    }
  }
}
__int64 __fastcall sub_140002BF4(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  _QWORD *VirtualForPhysical; // rax
  _QWORD *v7; // rbx
  _QWORD *v8; // rax
  _QWORD *v9; // rbx
  _QWORD *v10; // rax
  _QWORD *v11; // rbx
  unsigned __int64 *v12; // rax
  unsigned __int64 v13; // r9
  __int64 v14; // rax

  *(_OWORD *)a1 = 0i64;
  *(_OWORD *)(a1 + 16) = 0i64;
  DbgPrintEx(0, 0, aGetallpagesVir, a2, a3);
  VirtualForPhysical = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((a3 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 39) & 0x1FF)));
  *(_QWORD *)a1 = VirtualForPhysical;
  v7 = VirtualForPhysical;
  if ( VirtualForPhysical && (*VirtualForPhysical & 1) != 0 )
  {
    DbgPrintEx(0, 0, aGetallpagesPml, (*VirtualForPhysical >> 12) & 0xFFFFFFFFFi64, *VirtualForPhysical & 1i64);
    v8 = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v7 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 30) & 0x1FF)));
    *(_QWORD *)(a1 + 8) = v8;
    v9 = v8;
    if ( v8 && (*v8 & 1) != 0 )
    {
      DbgPrintEx(0, 0, aGetallpagesPdp, (*v8 >> 12) & 0xFFFFFFFFFi64, *v8 & 1i64, (*v8 >> 7) & 1i64);
      v10 = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v9 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 21) & 0x1FF)));
      *(_QWORD *)(a1 + 16) = v10;
      v11 = v10;
      if ( v10 && (*v10 & 1) != 0 )
      {
        DbgPrintEx(0, 0, aGetallpagesPde, (*v10 >> 12) & 0xFFFFFFFFFi64, *v10 & 1i64, (*v10 >> 7) & 1i64);
        v12 = (unsigned __int64 *)MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v11 & 0xFFFFFFFFF000i64)
                                                                           + 8 * ((a2 >> 12) & 0x1FF)));
        *(_QWORD *)(a1 + 24) = v12;
        if ( v12 && (v13 = *v12, v14 = *v12 & 1, (_DWORD)v14) )
          DbgPrintEx(
            0,
            0,
            "[GetAllPages] PTE read successfully. PFN: 0x%llx | Present: %d\n",
            (v13 >> 12) & 0xFFFFFFFFFi64,
            (unsigned int)v14);
        else
          DbgPrintEx(0, 0, "[GetAllPages] Failed to read PTE or PTE not present.\n");
      }
      else
      {
        DbgPrintEx(0, 0, "[GetAllPages] Failed to read PDE or PDE not present.\n");
      }
    }
    else
    {
      DbgPrintEx(0, 0, "[GetAllPages] Failed to read PDPTE or PDPTE not present.\n");
    }
  }
  else
  {
    DbgPrintEx(0, 0, "[GetAllPages] Failed to read PML4E or PML4E not present.\n");
  }
  return a1;
}
__int64 __fastcall sub_140002BF4(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  _QWORD *VirtualForPhysical; // rax
  _QWORD *v7; // rbx
  _QWORD *v8; // rax
  _QWORD *v9; // rbx
  _QWORD *v10; // rax
  _QWORD *v11; // rbx
  unsigned __int64 *v12; // rax
  unsigned __int64 v13; // r9
  __int64 v14; // rax

  *(_OWORD *)a1 = 0i64;
  *(_OWORD *)(a1 + 16) = 0i64;
  DbgPrintEx(0, 0, aGetallpagesVir, a2, a3);
  VirtualForPhysical = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((a3 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 39) & 0x1FF)));
  *(_QWORD *)a1 = VirtualForPhysical;
  v7 = VirtualForPhysical;
  if ( VirtualForPhysical && (*VirtualForPhysical & 1) != 0 )
  {
    DbgPrintEx(0, 0, aGetallpagesPml, (*VirtualForPhysical >> 12) & 0xFFFFFFFFFi64, *VirtualForPhysical & 1i64);
    v8 = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v7 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 30) & 0x1FF)));
    *(_QWORD *)(a1 + 8) = v8;
    v9 = v8;
    if ( v8 && (*v8 & 1) != 0 )
    {
      DbgPrintEx(0, 0, aGetallpagesPdp, (*v8 >> 12) & 0xFFFFFFFFFi64, *v8 & 1i64, (*v8 >> 7) & 1i64);
      v10 = MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v9 & 0xFFFFFFFFF000i64) + 8 * ((a2 >> 21) & 0x1FF)));
      *(_QWORD *)(a1 + 16) = v10;
      v11 = v10;
      if ( v10 && (*v10 & 1) != 0 )
      {
        DbgPrintEx(0, 0, aGetallpagesPde, (*v10 >> 12) & 0xFFFFFFFFFi64, *v10 & 1i64, (*v10 >> 7) & 1i64);
        v12 = (unsigned __int64 *)MmGetVirtualForPhysical((PHYSICAL_ADDRESS)((*v11 & 0xFFFFFFFFF000i64)
                                                                           + 8 * ((a2 >> 12) & 0x1FF)));
        *(_QWORD *)(a1 + 24) = v12;
        if ( v12 && (v13 = *v12, v14 = *v12 & 1, (_DWORD)v14) )
          DbgPrintEx(
            0,
            0,
            "[GetAllPages] PTE read successfully. PFN: 0x%llx | Present: %d\n",
            (v13 >> 12) & 0xFFFFFFFFFi64,
            (unsigned int)v14);
        else
          DbgPrintEx(0, 0, "[GetAllPages] Failed to read PTE or PTE not present.\n");
      }
      else
      {
        DbgPrintEx(0, 0, "[GetAllPages] Failed to read PDE or PDE not present.\n");
      }
    }
    else
    {
      DbgPrintEx(0, 0, "[GetAllPages] Failed to read PDPTE or PDPTE not present.\n");
    }
  }
  else
  {
    DbgPrintEx(0, 0, "[GetAllPages] Failed to read PML4E or PML4E not present.\n");
  }
  return a1;
}
__int64 __fastcall sub_140002E7C(__int64 a1)
{
  __int64 result; // rax

  result = *(_QWORD *)(a1 + 40);
  if ( !result )
    return *(_QWORD *)((unsigned int)sub_140002DFC() + a1);
  return result;
}
__int64 __fastcall sub_140002EA0(PCWSTR SourceString)
{
  __int64 v1; // rbx
  __int64 v2; // rax
  unsigned int *Pool; // rax
  unsigned int *v4; // rsi
  unsigned int *v5; // rdi
  __int64 v6; // rax
  struct _UNICODE_STRING v8; // [rsp+20h] [rbp-18h] BYREF
  ULONG v9; // [rsp+40h] [rbp+8h] BYREF

  v1 = 0i64;
  v8 = 0i64;
  if ( !SourceString )
    return 0i64;
  v2 = -1i64;
  do
    ++v2;
  while ( SourceString[v2] );
  if ( !v2 )
    return 0i64;
  RtlInitUnicodeString(&v8, SourceString);
  v9 = 0;
  if ( ZwQuerySystemInformation(SystemProcessInformation, 0i64, 0, &v9) != -1073741820 )
    return 0i64;
  Pool = (unsigned int *)ExAllocatePool(NonPagedPool, v9);
  v4 = Pool;
  if ( !Pool )
    return 0i64;
  if ( ZwQuerySystemInformation(SystemProcessInformation, Pool, v9, 0i64) >= 0 )
  {
    v5 = v4;
    while ( RtlCompareUnicodeString(&v8, (PCUNICODE_STRING)(v5 + 14), 1u) )
    {
      v6 = *v5;
      if ( (_DWORD)v6 )
      {
        v5 = (unsigned int *)((char *)v5 + v6);
        if ( v5 )
          continue;
      }
      _mm_lfence();
      ExFreePoolWithTag(v4, 0);
      return 0i64;
    }
    _mm_lfence();
    v1 = *((_QWORD *)v5 + 10);
  }
  else
  {
    _mm_lfence();
  }
  ExFreePoolWithTag(v4, 0);
  return v1;
}
__int64 __fastcall sub_140002F94(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, _QWORD *a5)
{
  __int64 v8; // rsi
  __int64 v9; // rdi
  __int64 v10; // rax
  __int64 v11; // r8
  __int64 v13; // [rsp+50h] [rbp+8h] BYREF

  if ( a1 )
  {
    sub_140001000(a1, &v13);
    if ( v13 )
    {
      v8 = sub_140002E7C(v13);
      v9 = 0i64;
      while ( 1 )
      {
        if ( !a4 )
          goto LABEL_10;
        v10 = sub_14000308C(v9 + a2, v8);
        if ( !v10 )
          break;
        v13 = 0i64;
        v11 = a4;
        if ( 4096 - (unsigned __int64)(v10 & 0xFFF) < a4 )
          v11 = 4096 - (v10 & 0xFFF);
        if ( (unsigned int)MmCopyMemory(v9 + a3, v10, v11, 1i64, &v13) )
        {
          DbgPrintEx(0, 0, "Failed to readphysicalAddress\n\n");
LABEL_10:
          *a5 = v9;
          return 0i64;
        }
        a4 -= v13;
        v9 += v13;
        if ( !v13 )
          goto LABEL_10;
      }
      DbgPrintEx(0, 0, "Failed to get physical!\n\n");
    }
  }
  return 3221225473i64;
}
unsigned __int64 __fastcall sub_14000308C(const void *a1, __int64 a2)
{
  unsigned __int64 v3; // r12
  unsigned __int64 v4; // r15
  unsigned __int64 v5; // rsi
  __int64 v6; // r14
  __int64 v7; // rax
  __int64 v9; // rax
  unsigned __int64 v10; // rcx
  _BYTE v11[16]; // [rsp+30h] [rbp-10h] BYREF
  unsigned __int64 v12; // [rsp+80h] [rbp+40h] BYREF
  __int64 v13; // [rsp+88h] [rbp+48h] BYREF
  __int64 v14; // [rsp+90h] [rbp+50h] BYREF
  __int64 v15; // [rsp+98h] [rbp+58h] BYREF

  v12 = (unsigned __int64)a1;
  DbgPrintEx(0, 0, "Virtual Address translating: %p\n", a1);
  v14 = 0i64;
  v3 = (v12 >> 12) & 0x1FF;
  v4 = (v12 >> 21) & 0x1FF;
  v5 = (v12 >> 30) & 0x1FF;
  v6 = v12 & 0xFFF;
  MmCopyMemory(&v14, (a2 & 0xFFFFFFFFFFFFFFF0ui64) + 8 * ((v12 >> 39) & 0x1FF), 8i64, 1i64, v11);
  v7 = v14;
  if ( (v14 & 1) == 0 )
  {
    DbgPrintEx(0, 0, aPdpeNotValid);
    return 0i64;
  }
  v13 = 0i64;
  v14 &= 0xFFFFFFFFFFF000ui64;
  MmCopyMemory(&v13, (v7 & 0xFFFFFFFFFFF000i64) + 8 * v5, 8i64, 1i64, v11);
  if ( (v13 & 1) == 0 )
  {
    DbgPrintEx(0, 0, aPdeNotValid);
    return 0i64;
  }
  if ( (v13 & 0x80u) != 0i64 )
  {
    DbgPrintEx(0, 0, "Large page!\n\n");
    v9 = v13 & 0xFFFFFFFFFFF000i64;
    v10 = v12 & 0xFFFFFFFFC0000000ui64;
    return v10 + v9;
  }
  v15 = 0i64;
  v13 &= 0xFFFFFFFFFFF000ui64;
  MmCopyMemory(&v15, v13 + 8 * v4, 8i64, 1i64, v11);
  if ( (v15 & 1) == 0 )
  {
    DbgPrintEx(0, 0, "PTE not valid!\n\n");
    return 0i64;
  }
  if ( (v15 & 0x80u) != 0i64 )
  {
    v9 = v15 & 0xFFFFFFFFFFF000i64;
    v10 = v12 & 0xFFFFFFFFFFE00000ui64;
    return v10 + v9;
  }
  v15 &= 0xFFFFFFFFFFF000ui64;
  MmCopyMemory(&v12, v15 + 8 * v3, 8i64, 1i64, v11);
  if ( (v12 & 0xFFFFFFFFFFF000i64) == 0 )
    return 0i64;
  return v6 + (v12 & 0xFFFFFFFFFFF000i64);
}
__int64 __fastcall sub_140003250(__int64 a1, __int64 a2, SIZE_T a3, SIZE_T *a4)
{
  __int64 v7; // rax
  void *v8; // rdi

  if ( !a1 )
    return 3221225473i64;
  v7 = MmMapIoSpaceEx(a1, a3, 4i64);
  v8 = (void *)v7;
  if ( !v7 )
    return 3221225473i64;
  sub_1400036C0(v7, a2, a3);
  *a4 = a3;
  MmUnmapIoSpace(v8, a3);
  return 0i64;
}
__int64 __fastcall sub_1400032C4(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, _QWORD *a5)
{
  __int64 v10; // rbp
  __int64 v11; // rbx
  __int64 v12; // rax
  SIZE_T v13; // r8
  __int64 v14; // [rsp+40h] [rbp+8h] BYREF

  if ( !a1 )
  {
    DbgPrintEx(0, 0, "[WriteProcessMemoryPhysical] Invalid ProcessID: 0\n");
    return 3221225473i64;
  }
  DbgPrintEx(0, 0, aWriteprocessme_1, a1);
  sub_140001000(a1, &v14);
  if ( !v14 )
  {
    DbgPrintEx(0, 0, "[WriteProcessMemoryPhysical] Failed to get PEPROCESS\n");
    return 3221225473i64;
  }
  v10 = sub_140002E7C(v14);
  if ( !v10 )
    return 3221225473i64;
  v11 = 0i64;
  if ( a4 )
  {
    while ( 1 )
    {
      v12 = sub_14000308C((const void *)(v11 + a2), v10);
      if ( !v12 )
        break;
      v14 = 0i64;
      v13 = a4;
      if ( 4096 - (unsigned __int64)(v12 & 0xFFF) < a4 )
        v13 = 4096 - (v12 & 0xFFF);
      if ( !(unsigned int)sub_140003250(v12, v11 + a3, v13, (SIZE_T *)&v14) )
      {
        if ( v14 )
        {
          v11 += v14;
          a4 -= v14;
          if ( a4 )
            continue;
        }
      }
      goto LABEL_14;
    }
    DbgPrintEx(0, 0, aWriteprocessme_2, v11 + a2);
    return 3221225473i64;
  }
LABEL_14:
  *a5 = v11;
  return 0i64;
}

__int64 sub_1400033F0()
{
  int v5; // r9d
  char v7; // r8
  char v17; // dl

  _RAX = 0i64;
  __asm { cpuid }
  v5 = _RAX;
  _RAX = 1i64;
  v7 = 0;
  __asm { cpuid }
  if ( (_RCX & 0x100000) != 0 )
  {
    v7 = 8;
    if ( (_RCX & 0x8000000) != 0 && (_RCX & 0x10000000) != 0 )
    {
      __asm { xgetbv }
      v7 = 8;
      if ( (_RAX & 6) == 6 )
        v7 = 12;
    }
  }
  _RAX = 7i64;
  if ( v5 >= 7 )
  {
    __asm { cpuid }
    v17 = v7 | 2;
    if ( (_RBX & 0x200) == 0 )
      v17 = v7;
    v7 = v17;
    if ( (_RBX & 0x20) != 0 && (v17 & 4) != 0 )
      v7 = v17 | 0x10;
  }
  byte_140006000 = v7 | 1;
  return 0i64;
}
__int64 __fastcall sub_140003600(_OWORD *a1, __int64 a2, __int64 a3)
{
  __int128 v3; // xmm0
  __int64 result; // rax

  if ( (byte_140006000 & 1) == 0 )
    result = sub_140003680();
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = v3;
  memset(
    (void *)((unsigned __int64)(a1 + 4) & 0xFFFFFFFFFFFFFFC0ui64),
    v3,
    (unsigned __int64)a1 + a3 - ((unsigned __int64)(a1 + 4) & 0xFFFFFFFFFFFFFFC0ui64));
  return result;
}
void sub_140003680()
{
  sub_1400033F0();
}


